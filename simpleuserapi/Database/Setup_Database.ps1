# PowerShell Script ƒë·ªÉ setup Database cho SimpleUserAPI
# Ch·∫°y script n√†y ƒë·ªÉ t·ª± ƒë·ªông t·∫°o database v√† c·∫•u h√¨nh

param(
    [Parameter(Mandatory=$false)]
    [string]$ServerName = "localhost\SQLEXPRESS",
    
    [Parameter(Mandatory=$false)]
    [string]$DatabaseName = "SimpleUserDB",
    
    [Parameter(Mandatory=$false)]
    [string]$Username = "",
    
    [Parameter(Mandatory=$false)]
    [string]$Password = "",
    
    [Parameter(Mandatory=$false)]
    [switch]$UseWindowsAuth = $true
)

Write-Host "üöÄ B·∫Øt ƒë·∫ßu setup Database cho SimpleUserAPI" -ForegroundColor Green
Write-Host "=================================================" -ForegroundColor Yellow

# Ki·ªÉm tra SQL Server
Write-Host "üîç Ki·ªÉm tra SQL Server..." -ForegroundColor Cyan
try {
    $sqlServer = Get-Service -Name "MSSQL*" -ErrorAction SilentlyContinue
    if ($sqlServer) {
        Write-Host "‚úÖ SQL Server ƒëang ch·∫°y: $($sqlServer.Name)" -ForegroundColor Green
    } else {
        Write-Host "‚ùå SQL Server kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. Vui l√≤ng c√†i ƒë·∫∑t SQL Server." -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå L·ªói khi ki·ªÉm tra SQL Server: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# T·∫°o connection string
Write-Host "üîß T·∫°o connection string..." -ForegroundColor Cyan
if ($UseWindowsAuth -and [string]::IsNullOrEmpty($Username)) {
    $connectionString = "Server=$ServerName;Database=$DatabaseName;Trusted_Connection=True;TrustServerCertificate=True;"
    Write-Host "‚úÖ S·ª≠ d·ª•ng Windows Authentication" -ForegroundColor Green
} else {
    $connectionString = "Server=$ServerName;Database=$DatabaseName;User Id=$Username;Password=$Password;TrustServerCertificate=True;"
    Write-Host "‚úÖ S·ª≠ d·ª•ng SQL Server Authentication" -ForegroundColor Green
}

Write-Host "üìù Connection String: $connectionString" -ForegroundColor Yellow

# Ch·∫°y script SQL
Write-Host "üìÅ Ch·∫°y script t·∫°o database..." -ForegroundColor Cyan
$scriptPath = Join-Path $PSScriptRoot "SimpleUserDB.sql"

if (Test-Path $scriptPath) {
    Write-Host "‚úÖ T√¨m th·∫•y script: $scriptPath" -ForegroundColor Green
    
    try {
        if ($UseWindowsAuth -and [string]::IsNullOrEmpty($Username)) {
            # Windows Authentication
            $result = sqlcmd -S $ServerName -i $scriptPath -h -1 -W
        } else {
            # SQL Server Authentication
            $result = sqlcmd -S $ServerName -U $Username -P $Password -i $scriptPath -h -1 -W
        }
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Script database ch·∫°y th√†nh c√¥ng!" -ForegroundColor Green
        } else {
            Write-Host "‚ùå L·ªói khi ch·∫°y script database" -ForegroundColor Red
            Write-Host "Output: $result" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "‚ùå L·ªói khi ch·∫°y script: $($_.Exception.Message)" -ForegroundColor Red
    }
} else {
    Write-Host "‚ùå Kh√¥ng t√¨m th·∫•y script: $scriptPath" -ForegroundColor Red
    exit 1
}

# Test k·∫øt n·ªëi database
Write-Host "üîó Test k·∫øt n·ªëi database..." -ForegroundColor Cyan
try {
    $testQuery = "SELECT COUNT(*) as UserCount FROM users WHERE is_active = 1"
    
    if ($UseWindowsAuth -and [string]::IsNullOrEmpty($Username)) {
        $result = sqlcmd -S $ServerName -d $DatabaseName -Q $testQuery -h -1 -W
    } else {
        $result = sqlcmd -S $ServerName -d $DatabaseName -U $Username -P $Password -Q $testQuery -h -1 -W
    }
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!" -ForegroundColor Green
        Write-Host "üìä K·∫øt qu·∫£: $result" -ForegroundColor Yellow
    } else {
        Write-Host "‚ùå L·ªói khi test k·∫øt n·ªëi database" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå L·ªói khi test k·∫øt n·ªëi: $($_.Exception.Message)" -ForegroundColor Red
}

# C·∫≠p nh·∫≠t file c·∫•u h√¨nh
Write-Host "üìù C·∫≠p nh·∫≠t file c·∫•u h√¨nh..." -ForegroundColor Cyan
$configFile = Join-Path (Split-Path $PSScriptRoot -Parent) "appsettings.json"

if (Test-Path $configFile) {
    Write-Host "‚úÖ T√¨m th·∫•y file c·∫•u h√¨nh: $configFile" -ForegroundColor Green
    
    try {
        # ƒê·ªçc file JSON
        $config = Get-Content $configFile | ConvertFrom-Json
        
        # C·∫≠p nh·∫≠t connection strings
        $config.ConnectionStrings.DefaultConnection = $connectionString
        $config.ConnectionStrings.SqlServer = $connectionString
        
        if ($UseWindowsAuth -and [string]::IsNullOrEmpty($Username)) {
            $config.ConnectionStrings.LocalDB = "Server=(localdb)\mssqllocaldb;Database=$DatabaseName;Trusted_Connection=True;TrustServerCertificate=True;"
        } else {
            $config.ConnectionStrings.SqlServerWithPassword = $connectionString
        }
        
        # L∆∞u file
        $config | ConvertTo-Json -Depth 10 | Set-Content $configFile
        Write-Host "‚úÖ ƒê√£ c·∫≠p nh·∫≠t file c·∫•u h√¨nh" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå L·ªói khi c·∫≠p nh·∫≠t file c·∫•u h√¨nh: $($_.Exception.Message)" -ForegroundColor Red
    }
} else {
    Write-Host "‚ùå Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh: $configFile" -ForegroundColor Red
}

# Build project
Write-Host "üî® Build project..." -ForegroundColor Cyan
try {
    $projectPath = Split-Path $PSScriptRoot -Parent
    Set-Location $projectPath
    dotnet build
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Build project th√†nh c√¥ng!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Build project th·∫•t b·∫°i" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå L·ªói khi build project: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "=================================================" -ForegroundColor Yellow
Write-Host "üéâ Ho√†n th√†nh setup Database!" -ForegroundColor Green
Write-Host "üìã Th√¥ng tin c·∫•u h√¨nh:" -ForegroundColor Cyan
Write-Host "   - Server: $ServerName" -ForegroundColor White
Write-Host "   - Database: $DatabaseName" -ForegroundColor White
Write-Host "   - Authentication: $(if($UseWindowsAuth) {'Windows'} else {'SQL Server'})" -ForegroundColor White
Write-Host "   - Config File: $configFile" -ForegroundColor White
Write-Host ""
Write-Host "üöÄ ƒê·ªÉ ch·∫°y ·ª©ng d·ª•ng:" -ForegroundColor Yellow
Write-Host "   dotnet run" -ForegroundColor White
Write-Host ""
Write-Host "üìñ Xem h∆∞·ªõng d·∫´n chi ti·∫øt: README_Database_Setup.md" -ForegroundColor Cyan
Write-Host ""
Write-Host "üîó Test API:" -ForegroundColor Yellow
Write-Host "   - Swagger UI: http://localhost:5000/swagger" -ForegroundColor White
Write-Host "   - Health Check: http://localhost:5000/health" -ForegroundColor White
Write-Host "   - API Endpoints: http://localhost:5000/api/user" -ForegroundColor White


